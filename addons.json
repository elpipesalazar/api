{
  "source": "doc/api/addons.markdown",
  "modules": [
    {
      "textRaw": "Addons",
      "name": "addons",
      "desc": "<p>Addons son objetos enlazados dinamicamente. Ellos pueden ser el pegamento entre las librerias C y C++ con NodeJS. La API (en estos momentos) es algo compleja, siendo necesario el conocimiento de varias librerias.\n\n</p>\n<ul>\n<li><p>V8 JavaScript, una libreria C++. Usada como interfaz con JavaScript:\ncreación de objetos, llamada a funciones, etc. Documentada extensamente en fichero de cabecera <code>v8.h</code> (<code>deps/v8/include/v8.h</code> en el arbol de fuentes de Node).</p>\n</li>\n<li><p>libev, C libreria para crear un bucle de evento. En cualquier momentos que sea necesario esperar para que el descriptor de un fichero llegue a ser legible, esperar por un timer, o esperar por una señal, que llevarlo a cabo será necesario utilizar el intefez de libev. Esto es, si tu realizas cualquier I/O, necesitaras usar libev. Node usa en bucle de evento <code>EV_DEFAULT</code>. La documentación puede ser encontrada <a href=\"http://cvs.schmorp.de/libev/ev.html\">aqui</a>.</p>\n</li>\n<li><p>libie, librería para manejar el pool de las hebras. Usado para hacer llamadas bloqueantes POSIX del sistema de forma asincrona. Una amplia variedad de envolturas ya existe para cada llamada, en <code>src/file.cc</code> por lo que posiblemente no tengas que usarla. Si necesitas usarla echale un vistazo al fichero de cabecera <code>deps/libie/eio.h</code>.</p>\n</li>\n<li><p>Librerias internas de Node. La más importante es la clase <code>node::ObjectWrap</code> que probablemente de la que tu desearas heredar.</p>\n</li>\n<li><p>Otras. Mira en <code>deps/</code> para cualquier cosa disponible.</p>\n</li>\n</ul>\n<p>Node estáticamente compila todas las dependencias dentro del ejecutable. Cuando compiles tú módulo, tu no tendrás que preocuparte sobre enlazar ninguna de estas librerias.\n\n</p>\n<p>Para comenzar hagamos un pequeño Addon el cual hará lo siguiente in C++:\n\n</p>\n<pre><code>exports.hello = &apos;world&apos;;</code></pre>\n<p>Para comenzar creamos el fichero <code>hello.cc</code>:\n\n</p>\n<pre><code>#include &lt;v8.h&gt;\n\nusing namespace v8;\n\nextern &quot;C&quot; void\ninit (Handle&lt;Object&gt; target)\n{\n  HandleScope scope;\n  target-&gt;Set(String::New(&quot;hello&quot;), String::New(&quot;world&quot;));\n}</code></pre>\n<p>Este código fuente necesita ser construido dentro de <code>hello.node</code>, el Addon binario. Para hacer esto nosotros creamos un fichero llamado <code>wscript</code> el cual es código python y se ve como sigue:\n\n</p>\n<pre><code>srcdir = &apos;.&apos;\nblddir = &apos;build&apos;\nVERSION = &apos;0.0.1&apos;\n\ndef set_options(opt):\n  opt.tool_options(&apos;compiler_cxx&apos;)\n\ndef configure(conf):\n  conf.check_tool(&apos;compiler_cxx&apos;)\n  conf.check_tool(&apos;node_addon&apos;)\n\ndef build(bld):\n  obj = bld.new_task_gen(&apos;cxx&apos;, &apos;shlib&apos;, &apos;node_addon&apos;)\n  obj.target = &apos;hello&apos;\n  obj.source = &apos;hello.cc&apos;</code></pre>\n<p>Lanzando <code>node-waf configure build</code> crearemos un fichero <code>build/default/hello.node</code> el cual es nuestro Addon.\n\n</p>\n<p><code>node-waf</code> es solo <a href=\"http://code.google.com/p/waf\">WAF</a>, el sistema de construcción basado en python. <code>node-waf</code> is proporcionado para la facilidad de los usuarios.\n\n</p>\n<p>Todos los Addons de Node deben exportar un función llamada <code>init</code> con la siguiente constitución:\n\n</p>\n<pre><code>extern &apos;C&apos; void init (Handle&lt;Object&gt; target)</code></pre>\n<p>Por el momento, esta es toda la documentación sobre Addons. Por favor, mira <a href=\"https://github.com/ry/node_postgres\">https://github.com/ry/node_postgres</a> para un ejemplo real.\n</p>\n",
      "type": "module",
      "displayName": "Addons"
    }
  ]
}
